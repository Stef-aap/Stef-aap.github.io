-- -----------------------------------------------------------------------------
-- <title Scans 2 potmeters
-- <License
-- freeware, under the terms of the GNU GPL
--  Copyright (C) 2002 Stef Mientki
-- -----------------------------------------------------------------------------
-- <Description
-- Library to scan 2 potmeters on a 16F628
--
-- Scans 2 potmeters of which the sliders are pin_a0 and pin_a1
-- One end of the potmeters must be tight to ground and
-- the other end through a resistor of half the potmeters value to +5V
--
-- use it by regulary calling,
-- which toggles reading of the 2 potmeters
--   scan_2_pots (key)
--
-- return values
--   key == 0 no change of potmeters was detected
--   0x80 <= key <= 0x87 , key is the (changed) value on pin_a0
--   0x90 <= key <= 0x97 , key is the (changed) value on pin_a1
--   a low value agrees with the slider to ground
--
-- the last scanned value of both potmeters can be read at each moment through
-- the pseudo variables
--   potmeter1
--   potmeter2
--
-- there's no definition or initialization necessary
--
-- <version 1.1   ,11-01-2002,  Stef Mientki
--   - delay for settling comparator in scan_2_pots made shorter,
--         (a little faster, no functional change)
-- <Version 1.0   ,6-12-2001,   Stef Mientki
--   - first release
-- --------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- <Example RS232
; -- define settings
; const usart_asynch = true      ;true = RS232, false = SPI
; const baudrate     = 115_200   ;Baudrate
;
; var byte xx
; forever loop
;   -- if character received, echo inverted
;   if asynch_read_hw (xx) then
;     asynch_send_hw ( ! xx)
;   end if
;   ... do other things here
; end loop
-- -----------------------------------------------------------------------------


-- <code


-- routines for the special hardware
include 16f628_spec


-- --------------------------------------------------------------------
-- global variables, only to used by this library
-- --------------------------------------------------------------------
var bit  _pot_scan1  = false  -- indicates which of 2 pots will be scanned
var byte _pot_value1 = 0      -- store the previous value of potmeter 1
var byte _pot_value2 = 0      -- store the previous value of potmeter 2
-- --------------------------------------------------------------------



-- --------------------------------------------------------------------
-- local (re-)definition of power levels
-- this has nothing to do with the standard RCX library,
-- but just depends on the way you want to control the motor power,
-- in this case from 2 potmeters
-- therefor it reads the internal variables of scan_pots
-- --------------------------------------------------------------------
function potmeter1'get return byte is
  return _pot_value1 / 2
end function
function potmeter2'get return byte is
  return _pot_value2 / 2
end function
-- --------------------------------------------------------------------



-- --------------------------------------------------------------------
-- Scans 2 potmeters of which the sliders are pin_a0 and pin_a1
-- one end of the potmeters must be tight to ground and
-- the other end through a resistor of half the potmeters value to +5V
-- --------------------------------------------------------------------
procedure scan_2_pots ( byte out _pot_key ) is

var byte comparator
var byte Vref
var bit  found

  -- initialize output (if no change found)
  _pot_key = 0

  -- initialize Vref on maximum+1
  Vref = 16

  -- search until Vref reached the end
  -- or until found
  found = false
  while ( Vref > 0 ) & ! found  loop
    Vref = Vref - 1
    Vref_set ( Vref )

    -- delay to settle the comparator (typical 150 ns, max 400 ns)
    -- for 20 Mhz a maximu of 2 instructions is enough
    -- total while loop is about 50 usec
    asm nop
    asm nop

    -- now read comparator
    comparator = CMCON

    -- now test the actual comparator
    if _pot_scan1 then
      comparator = ( comparator & 0x80 )
    else
      comparator = ( comparator & 0x40 )
    end if
    found = ( comparator == 0 )

  end loop
  -- set focus on other potmeter
  _pot_scan1 = ! _pot_scan1

  -- determine (absolute) difference
  if _pot_scan1 then comparator = Vref - _pot_value1
  else comparator = Vref - _pot_value2 end if


  -- if overflow, correct to absolute value (negative --> positive)
  if ( ( comparator & 0x80 ) != 0 ) then
    comparator = ( ! comparator ) + 1
  end if

  -- if difference large enough (hysteresis),
  -- export the value
  if comparator >= 2 then
    if _pot_scan1 then
      _pot_value1 = Vref
      _pot_key = 0x80 + Vref / 2
    else
      _pot_value2 = Vref
      _pot_key = 0x90 + Vref / 2
    end if
  end if
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- initialization
-- --------------------------------------------------------------------
  -- setup comparator, mode 2 is the only mode where both comparators are
  -- connected to the internal Vref
  CMCON = _CMCOM_mode2

  -- setup Vref, high range and output enabled
  Vref_init ( true , true )

  -- setup correct IO directions
  -- because these are the only comparator registers,
  -- where the scan routine for works
  -- other pins are possible, but then the CIS biot must be controled
  -- next statements not necessary, because
  -- it's assumed that ports are intialized as inputs
  -- pin_a0_direction = input
  -- pin_a1_direction = input

