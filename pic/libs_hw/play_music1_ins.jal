-- -----------------------------------------------------------------------------
-- Example of sound tables, to be used with PLAY_MUSIC
-- -----------------------------------------------------------------------------
-- Library for generating sounds, using TMR0
--
-- Use of this library
--   make a local copy of this file in the program directory
-- Then change the following, according to your needs
--   define the IO pin
--   define the frequency of each note in table1
--   define the duration of each note in table2
--   from the main program, include this file and call PLAY_SONG
--
-- Author : Stef Mientki
-- Version: 1.0  07-04-2002  orginal release
-- -----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- Define at which pin the piezo speaker will be mounted
-- (a Piezo speaker may be mounted directly between IO pin and Ground)
-- Remember that the IO pin must have a full push-pull circuit,
-- so for instance RA4 on a 16F628 is not good enough.
-- ----------------------------------------------------------------------------
var bit sound_pin is pin_b0
pin_b0_direction = output
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- This constant definies how the music is played,
--   that is what is done in the interrupt and what's done outside
--     or in other words
--   it determines if you can do something during playing of the song
-- by declaring it as an var, you can dynamically change between the 2 modes
-- IF only one of the 2 modes is used, it's advised to define as a constant,
-- it will preserve memory (not only this 1 byte !)
-- ----------------------------------------------------------------------------
;const play_music_mode_interrupt        = true
var bit  play_music_mode_interrupt     = false
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
;const _BMS_table = 1  ;The number of tables (to save memory)
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
var byte sound_pause = 0
-- ----------------------------------------------------------------------------
; Generated by Brick's Music Studio 1.4
; Developed by Guido Truffelli www.aga.it/~guy
; Special thanks to Stef Mientki

; Original MIDI file D:\_temp_robbert\Addams_Family.mid
; Transposed by 0 semitones; Playback speed 100%

const _BMS_table = 2

procedure _table_tone_duration_1 is
  pragma jump_table
  assembler
    addwf PCL,f
    retlw 0
    retlw 257
    retlw 191
    retlw 29
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 142
    retlw 43
    retlw 0
    retlw 214
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 214
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 191
    retlw 29
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 142
    retlw 43
    retlw 0
    retlw 214
    retlw 191
    retlw 29
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 142
    retlw 43
    retlw 0
    retlw 214
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 214
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 191
    retlw 29
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 142
    retlw 43
    retlw 0
    retlw 157
    retlw 95
    retlw 29
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 80
    retlw 21
    retlw 75
    retlw 64
    retlw 63
    retlw 21
    retlw 75
    retlw 64
    retlw 95
    retlw 21
    retlw 113
    retlw 64
    retlw 71
    retlw 21
    retlw 0
    retlw 64
    retlw 95
    retlw 21
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 71
    retlw 21
    retlw 75
    retlw 64
    retlw 95
    retlw 21
    retlw 85
    retlw 64
    retlw 75
    retlw 21
    retlw 71
    retlw 86
    retlw 0
    retlw 64
    retlw 95
    retlw 21
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 80
    retlw 21
    retlw 75
    retlw 64
    retlw 63
    retlw 21
    retlw 75
    retlw 64
    retlw 95
    retlw 21
    retlw 113
    retlw 64
    retlw 71
    retlw 21
    retlw 0
    retlw 64
    retlw 95
    retlw 21
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 71
    retlw 21
    retlw 75
    retlw 64
    retlw 95
    retlw 21
    retlw 85
    retlw 64
    retlw 75
    retlw 21
    retlw 71
    retlw 86
    retlw 191
    retlw 29
retlw 0
retlw 0
;    retlw 170
;    retlw 29
;    retlw 151
;    retlw 29
;    retlw 142
;    retlw 43
;    retlw 0
;    retlw 214
;    retlw 170
;    retlw 29
;    retlw 151
;    retlw 29
  end assembler
end procedure

procedure _table_tone_duration_2 is
  pragma jump_table
  assembler
    addwf PCL,f
    retlw 55 ;135
    retlw 200 ;29
    retlw 127
    retlw 43
    retlw 0
    retlw 214
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 135
    retlw 29
    retlw 127
    retlw 43
    retlw 0
    retlw 43
    retlw 191
    retlw 29
    retlw 170
    retlw 29
    retlw 151
    retlw 29
    retlw 142
    retlw 43
    retlw 0
    retlw 157
    retlw 95
    retlw 29
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 95
    retlw 1
    retlw 0
    retlw 28
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 80
    retlw 21
    retlw 75
    retlw 64
    retlw 63
    retlw 21
    retlw 75
    retlw 64
    retlw 95
    retlw 21
    retlw 113
    retlw 64
    retlw 71
    retlw 21
    retlw 0
    retlw 64
    retlw 95
    retlw 21
    retlw 71
    retlw 64
    retlw 56
    retlw 21
    retlw 71
    retlw 64
    retlw 85
    retlw 21
    retlw 106
    retlw 64
    retlw 63
    retlw 21
    retlw 0
    retlw 64
    retlw 71
    retlw 21
    retlw 75
    retlw 86
    retlw 95
    retlw 86
    retlw 85
    retlw 86
    retlw 75
    retlw 86
    retlw 71
    retlw 86
    retlw 0
    retlw 0
  end assembler
end procedure



-- ----------------------------------------------------------------------------
-- table can be upto 254 bytes long, the name of the table may NOT be changed
--
-- the tables contains 2 values per tone
--   PERIOD
--     DURATION
--
-- the PERIOD must be calculated with the next formula
--   constant = 1_000_000 / ( 60 * frequency[Hz] )
--
-- the DURATION must be calculated with the next formula
--   constant = duration[msec] / 5
--
-- if PERIOD=0 and DURATION<>0 then a long pause is inserted
--
-- if DURATION=0 the end of the song is indicated
--
-- By these end-markers it's possible to store more songs or couplets into the tables
-- (see the demo)
-- ----------------------------------------------------------------------------
-- in this case, this table is not used,
-- instead below is another table declared
-- ----------------------------------------------------------------------------
procedure _table_tone_duration_1_NON is
   pragma jump_table
   assembler
      addwf PCL,f
retlw   67        ; first tone
  retlw   92      ; duration of first tone
retlw   101
  retlw   47
retlw   90
  retlw   47
retlw   80
  retlw   47
retlw   76
  retlw   47
retlw   67
  retlw   73
retlw   101
  retlw   73
retlw 0
retlw 0
retlw   101
  retlw   73
retlw   60
  retlw   93
retlw   76
  retlw   47
retlw   67
  retlw   47
retlw 0
retlw 0
retlw   60
  retlw   47
retlw   54
  retlw   47
retlw   51
  retlw   73
retlw   101
  retlw   73
retlw   101
  retlw   73
retlw   76
  retlw   93
retlw   80
  retlw   93
retlw   76
  retlw   47
retlw   80
  retlw   47
retlw   67
  retlw   47
retlw   76
  retlw   47
retlw   80
  retlw   47
retlw   90
  retlw   47
retlw   90
  retlw   47
retlw   101
  retlw   47
retlw   90
  retlw   93
retlw   80
  retlw   47
retlw   90
  retlw   47
retlw   101
  retlw   47
retlw   107
  retlw   47
retlw   101
  retlw   255
retlw     0    ; 0 = end of table
  retlw   0    ; double 0 , because duration is the second byte
   end assembler
end procedure

-- ----------------------------------------------------------------------------
-- second table
-- if the table is not used, it doesn't have to be cleared,
-- because due to _BMS_table=1 it will be stuffed away by the compiler.
-- ----------------------------------------------------------------------------
;procedure _table_tone_duration_2 is
;   pragma jump_table
;   assembler
;      addwf PCL,f
;retlw   67
;   end assembler
;end procedure
-- ----------------------------------------------------------------------------
-- third table
-- ----------------------------------------------------------------------------
procedure _table_tone_duration_3 is
   pragma jump_table
   assembler
      addwf PCL,f
retlw   67
  retlw   92
retlw     0    ; 0 = end of table
  retlw   0    ; double 0 , because duration is in second byte
   end assembler
end procedure
-- ----------------------------------------------------------------------------
-- fourth table
-- ----------------------------------------------------------------------------
procedure _table_tone_duration_4 is
   pragma jump_table
   assembler
      addwf PCL,f
retlw   67
  retlw   92
retlw     0    ; 0 = end of table
  retlw   0    ; double 0 , because duration is in second byte
   end assembler
end procedure
-- ----------------------------------------------------------------------------
-- fifth table
-- ----------------------------------------------------------------------------
procedure _table_tone_duration_5 is
   pragma jump_table
   assembler
      addwf PCL,f
retlw   67
  retlw   92
retlw     0    ; 0 = end of table
  retlw   0    ; double 0 , because duration is in second byte
   end assembler
end procedure
-- ----------------------------------------------------------------------------







-- ----------------------------------------------------------------------------
-- definitions of some notes
--   Do1 = 1_000_0000 / ( 2 * 30 * frequency )
-- ----------------------------------------------------------------------------
const Do1  = 1_000_000 / ( 2 * 30 * 262 )
const Re1  = 1_000_000 / ( 2 * 30 * 294 )
const Mi1  = 1_000_000 / ( 2 * 30 * 330 )
const Fa1  = 1_000_000 / ( 2 * 30 * 349 )
const Sol1 = 1_000_000 / ( 2 * 30 * 392 )
const La1  = 1_000_000 / ( 2 * 30 * 440 )
const Si1  = 1_000_000 / ( 2 * 30 * 262 )

const Do2 = 1_000_000 / ( 2 * 30 * 523 )
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- define some constants, determining the note duration
-- ----------------------------------------------------------------------------
const violin_temp  = 24
const violin_temp2 = 2 * violin_temp
const violin_temp4 = 4 * violin_temp
-- ----------------------------------------------------------------------------
-- in this case we alwasy want a (small) pause inbetween the notes
sound_pause = violin_temp
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
procedure _table_tone_duration_7 is
   pragma jump_table
   assembler
      addwf PCL, f
retlw do1
retlw violin_temp
retlw re1
retlw violin_temp
retlw mi1
retlw violin_temp
retlw fa1
retlw violin_temp
retlw sol1
retlw violin_temp2
retlw sol1
retlw violin_temp2
retlw la1
retlw violin_temp2
retlw la1
retlw violin_temp2
retlw sol1
retlw violin_temp4
retlw 0
retlw 0
-- -------
retlw fa1
retlw violin_temp2
retlw fa1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw sol1
retlw violin_temp4
retlw fa1
retlw violin_temp2
retlw fa1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw do1
retlw violin_temp4
retlw 0
retlw 0
-- ------
retlw do2
retlw violin_temp
retlw do2
retlw violin_temp
retlw si1
retlw violin_temp2
retlw si1
retlw violin_temp2
retlw la1
retlw violin_temp2
retlw la1
retlw violin_temp2
retlw sol1
retlw violin_temp4
retlw 0
retlw 0
-- --------
retlw fa1
retlw violin_temp2
retlw fa1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw sol1
retlw violin_temp4
retlw fa1
retlw violin_temp2
retlw fa1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw mi1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw re1
retlw violin_temp2
retlw do1
retlw violin_temp4
retlw 0
retlw 0
   end assembler
end procedure
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- here the actual sound generation routines are included
-- ----------------------------------------------------------------------------
include play_music
-- ----------------------------------------------------------------------------

