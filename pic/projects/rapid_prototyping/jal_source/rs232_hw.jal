-- -----------------------------------------------------------------------------
-- <title USART hardware control
-- <License
-- freeware, under the terms of the GNU GPL
--  Copyright (C) 2002 Stef Mientki
-- -----------------------------------------------------------------------------
-- <Description
-- USART hardware control.
--  Routines for sending and receiving through the PIC-usart,
-- both RS232 and SPI are supported
--  Baudrate can simply be set through a human constant,
-- because the baudrate depending registers are calculated by this unit.
--  Baudrate is calculated, starting at the high baudrate flag,
-- which will ensure the highest possible accuracy.
--  SPI routines are setup for more SPI-devices,
-- in which case CS should be controled outside this unit.
--  Transmission parameters are 8 databits, 1 stopbit, no parity, no handshake.
--
-- <non-tag
-- procedure SPI_init is
-- procedure asynch_init_hw is
-- procedure asynch_disable_hw
-- procedure asynch_send_hw( byte in x ) is
-- function  asynch_read_hw( byte out x ) return bit is
-- procedure SPI_send_hw( byte in x ) is
-- procedure SPI_read_hw( byte out x ) is
--
-- <Version: 3.0    ,21-08-2002, Stef Mientki
--   - INTCON clearing removed, blocked all interrupts,
--     instead PIE bits cleared to prevent USART interrupts
--
-- <Version: 2.0    ,21-06-2002, Stef Mientki
--   - added Procedure ASYNCH_DISABLE_HW
--
-- <Version: 1.0    ,17-03-2002, Stef Mientki
--   - original release
-- --------------------------------------------------------------------


-- -----------------------------------------------------------------------------
-- <Example RS232
; -- define settings
; const usart_asynch = true      ;true = RS232, false = SPI
; const baudrate     = 115_200   ;Baudrate
;
; var byte xx
; forever loop
;   -- if character received, echo inverted
;   if asynch_read_hw (xx) then
;     asynch_send_hw ( ! xx)
;   end if
;   ... do other things here
; end loop
-- -----------------------------------------------------------------------------


-- <code

-- --------------------------------------------------------------------
-- internal function, calculates and sets baudrate divider
-- and stores it in the appropiate register.
-- the high-speed / low-speed bit is not stored but returned as the result
--
-- Special attention is payed to the highest and lowest baudrates,
-- a deviation of 5% is accepted in these cases
--
-- Asynchronuous baudrate settings (see also page 74/75 of DS40300B)
--
-- if BRGH = 0 (low speed)
--  SPBRG = ( Fosc / ( 64 * Baudrate ) ) -1
--
-- if BRGH = 1 (high speed)
--  SPBRG = ( Fosc / ( 16 * Baudrate ) ) -1
--
-- Synchronous baudrate settings
-- BRGH = 0 (low speed)
--  SPBRG = ( Fosc / ( 4 * Baudrate ) ) -1
-- --------------------------------------------------------------------
procedure _calculate_and_set_Baudrate is
  const max_deviation = 5  -- maximum % deviation of the realized baudrate
  var bit baudrate_high
;var byte var1
;var bit baudrate_high at var1 : BRGH

  if usart_asynch then

    -- first try high baudrate, will generate highest accuarcy
    -- to get the right rounding (5 + 10*f(x)) /10
    const usart_div = ((5 + ( ( 10 * target_clock ) / ( 16 * baudrate ))  ) / 10 ) - 1


;var byte aaap
    -- special case if divider is 0,
    -- test if deviation is not too much
    if usart_div <= 0 then
      if (100 * (baudrate - (target_clock / 16) )) / baudrate >= max_deviation then
        pragma error  -- asynchronous baudrate is too high
      end if
    end if

;aaap = usart_div
;pragma test assert  aaap == 10
;pragma test assert SPBRG == 10
;pragma test done
    -- if divider small enough,
    -- calculate divider and set high-speed
    if usart_div <= 255 then
      if usart_div >= 0 then SPBRG = usart_div else SPBRG = 0 end if
      baudrate_high = true

    -- try the low-speed mode
    else
      const usart_div_low = ((((10 * target_clock) / ( 64 * baudrate )) + 5 ) / 10) - 1
      -- here divider will never be 0

      -- but special case to consider,
      -- if baudrate is just a little too low
      if (usart_div_low > 255) &
         (100 * ((target_clock / (64 * 256 )) - baudrate)) / baudrate < max_deviation
      then
        SPBRG = 255
        baudrate_high = false

      -- now calculate divider and set high-speed / low-speed bit
      elsif usart_div_low <= 255 then
        if usart_div_low >= 0 then SPBRG = usart_div_low else SPBRG = 0 end if
        baudrate_high = false

      else
        pragma error -- asynchronous baudrate is too low
      end if
    end if

    -- now set baudrate high-low bit in TXSTA
    if baudrate_high then
      TXSTA = TXSTA | _b_BRGH         -- set baudrate-high flag
    else
      TXSTA = TXSTA & ! ( _b_BRGH )   -- clear baudarte-high flag
    end if


;    assembler
;      bank 0
;      local L1,L2
;      page L2

;      btfss  baudrate_high ;skip if high baudrate
;      goto   L1                 ;
;      bsf    STATUS,RP0         ;select bank 1
;      bsf    _TXSTA,BRGH        ;set baufrate = high
;      goto   L2                 ;
;    L1:                         ;
;      bsf    STATUS,RP0         ;select bank 1
;      bcf    _TXSTA,BRGH        ;set baudrate = low
;    L2:                         ;
;      bcf    STATUS,RP0         ;back to bank 0
;    end assembler


  else  -- synchronous mode
    const usart_div_sync = ( target_clock / ( 4 * baudrate )) - 1

    -- special case if divider is 0 or negative
    -- test if baudrate is a little bit too high
    if usart_div_sync <= 0 then
      if (100 * (baudrate - (target_clock / 4 ) )) / baudrate >= max_deviation
      then
        pragma error  -- synchronous baudrate is too high
      end if
    end if

    -- special case to consider,
    -- if baudrate is just a little too high
    if (usart_div_sync > 255) &
       (100 * ((target_clock / (4 * 256)  ) - baudrate)) / baudrate < max_deviation
    then
      SPBRG = 255
    elsif usart_div_sync <= 255 then
      if SPBRG >= 0 then SPBRG = usart_div_sync else SPBRG = 0 end if
    else
      pragma error -- synchronous baudrate is too low
    end if
  end if
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- Initializes the SPI port, calculates baudrate registers.
-- Normally this routine should not be called by the user program,
-- it's called once at the end of this unit.
-- Only after "asynch_disable_hw" it's necessary to call this routine,
-- to enable the SPI hardware again.
-- --------------------------------------------------------------------
procedure SPI_init is
  -- disable all USART interrupts
  _PIE1 = _PIE1 & (! _b_RCIE)
  _PIE1 = _PIE1 & (! _b_TXIE)
;intcon = 0

  -- Load baudrate generator
  _calculate_and_set_baudrate

  -- TXSTA = CSRC - TX9 - TXEN - SYNC -- x - BRGH - TRMT - TX9D
  -- CSRC = 1 = master mode
  -- TX9  = 0 = disable 9 bit transmission
  -- TXEN = 1 = enable transmission
  -- SYNC = 1 = enable synchronous mode
  --
  -- x    = 0
  -- BRGH = 1 = high speed baudrate (in synchronous mode don't care)
  -- TRMT = 0 = true if TSR register empty (data is send)
  -- TX9D = 0 = 9-bit to be send
  TXSTA = 0b_1011_0100

  -- RCSTA = SPEN - RX9 - SREN - CREN -- ADEN - FERR - OERR - RX9D
  -- SPEN = 1 = enable serial port
  -- RX9  = 0 = disable 9 bit receiving
  -- SREN = 0 = disable single byte reception
  -- CREN = 0 = disable multi byte reception (CREN=1 overrules SREN)
  --            also used to clear OERR
  --
  -- ADEN = 0 = address detect
  -- FERR = 0 = framing error
  -- OERR = 0 = overrun error (received bytes are not removed by reading RCREG)
  -- RX9D = 0 = 9-bit received
  -- Enable serial port : SPEN=1
  RCSTA = 0b_1000_0000

end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- Initializes the RS232 port, calculates baudrate registers.
-- Normally this routine should not be called by the user program,
-- it's called just once at the end of this unit
-- Only after "asynch_disable_hw" it's necessary to call this routine,
-- to enable the RS232 hardware again.
-- --------------------------------------------------------------------
procedure asynch_init_hw is
  -- disable all USART interrupts
  _PIE1 = _PIE1 & (! _b_RCIE)
  _PIE1 = _PIE1 & (! _b_TXIE)
;intcon = 0

  -- Enable transmitter : TXEN=1
  TXSTA = 0x20

  -- Load baudrate generator, must be done after TXSTA is loaded
  ;_TXSTA_BRGH = _calculate_SPBRG
  _calculate_and_set_baudrate

  -- Enable serial port : SPEN=1
  RCSTA = 0x80

  -- enable Receiver CREN = 1
  RCSTA = RCSTA | 0x10

  -- Set RB2 as output
  -- MUST BE CHANGED THROUGH SHADOW
--  TRISB = 0x00

--  _portb = 0

end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- Disables USART (wether used as RS232 or SPI),
-- so ports can be used (temporary) for other purposes.
-- USART can be enabled again by calling   asynch_init_hw  or  SPI_init_hw
-- --------------------------------------------------------------------
procedure asynch_disable_hw is
  -- Disable Serial port : SPEN=0
  SPEN = low
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- Asynchronuous RS232 send routine, using the TX pin
-- Sends byte X (8 bit with no parity) to the serial port
-- First checks (and waits if necessary) if transmit buffer is empty
--
-- remark: PIR1-register (containing _TXIF-flag) must be in bank0 !!
-- --------------------------------------------------------------------
procedure asynch_send_hw ( byte in x ) is
  -- wait until TXREG is empty
  while ! TXIF loop end loop

  -- then put new byte in TXREG (prepare for transmission)
  TXREG = x
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- Returns truw if a character was received, otherwise returns false.
-- Overrun error flag is cleared.
-- --------------------------------------------------------------------
function asynch_read_hw ( byte out x ) return bit is
var bit result

  -- test if byte available, and if so,
  -- get byte and transport to outer world
  if RCIF then
    x = RCREG
    result = true
  else
    result = false
  end if


  ; if OverRun error, clear !!
  if ( RCSTA & 0b_0000_0010 ) > 0 then
    RCSTA = RCSTA & ( ! 0x10)
    RCSTA = RCSTA | (0x10)
  end if

  return result
end function
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- SPI send routine, using the TX pin
-- Sends byte X (8 bit with no parity) to the serial port
-- After sending the byte, this routine will wait till byte is really transmitted.
-- This is done in order to be able to use CS for multiple SPI-devices.
--
-- remark: PIR1-register (containing _TXIF-flag) must be in bank0 !!
-- --------------------------------------------------------------------
procedure SPI_send_hw ( byte in x ) is
  -- enable transmission
  TXSTA = TXSTA | 0b_0010_0000

  asynch_send_hw (x)

  -- wait till transmission ready (safe through empty of TSR register)
  while  (( TXSTA & 0b_0000_0010 ) == 0 )  loop end loop

  -- disable transmission
  TXSTA = TXSTA & (! 0b_0010_0000)
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- reads a byte from the SPI-bus
-- After reception, all error flags are cleared
-- --------------------------------------------------------------------
procedure SPI_read_hw ( byte out x ) is

  -- enable receiving
  RCSTA = RCSTA & (! 0x30 )    -- clear OERR, by clearing CREN and SREN
  RCSTA = RCSTA | 0x20         -- enable single reception

  -- wait until byte received, RXREG is filled
  while ! RCIF loop end loop

  -- get byte and transport to outer world
  x = RCREG

  -- clear all errors and disable reception
  RCSTA = RCSTA & (! 0x30 )    -- clear OERR, by clearing CREN and SREN
end procedure
-- --------------------------------------------------------------------


-- --------------------------------------------------------------------
-- initialization, depending on the parameters set by the user,
-- the baudrate is calculated and all the relevant registers are set
-- --------------------------------------------------------------------
if usart_asynch then
  asynch_init_hw
else
  spi_init
end if
-- --------------------------------------------------------------------

