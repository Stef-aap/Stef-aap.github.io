-- --------------------------------------------------------------------
--
-- file         : seriali.jal
-- author       : Wouter van Ooijen
-- date         : 07-DEC-1998
-- purpose      : asynchronous busy serial IO routines
-- includes     : jpic, interval, serialp
--
-- Copyright (C) 1998, 2002 Wouter van Ooijen
--
-- This library is free software; you can redistribute it and/or
-- modify it under the terms of the GNU Library General Public
-- License as published by the Free Software Foundation; either
-- version 2 of the License, or (at your option) any later version.
--
-- This library is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- Library General Public License for more details.
-- 
-- You should have received a copy of the GNU Library General Public
-- License along with this library; if not, write to the
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-- Boston, MA  02111-1307, USA.
--
-- 15-may-2002 half-bit wait reduced to 0.2 bit time
-- --------------------------------------------------------------------

-- required libraries
include jpic
include jdelay
include interval

-- parity is not implemented
if asynch_parity != parity_none then
   pragma error -- parity is not implemented
end if

-- set the appropriate interval
procedure _asynch_init is
   if asynch_baudrate == 19200 then
      init_interval_1uS( 52 )
   elsif asynch_baudrate == 9600 then
      init_interval_1uS( 104 )
   elsif asynch_baudrate == 4800 then
      init_interval_1uS( 208 )
   elsif asynch_baudrate == 2400 then
      init_interval_10uS( 42 )
   elsif asynch_baudrate == 1200 then
      init_interval_10uS( 83 )
   elsif asynch_baudrate == 600 then
      init_interval_10uS( 166 )
   elsif asynch_baudrate == 300 then
      init_interval_100uS( 33 )
   elsif asynch_baudrate == 110 then
      init_interval_100uS( 91 )
   else
      pragma error -- unsupported baudrate
   end if
end procedure

-- wait approximately half a bit time
procedure _asynch_wait_half is
   if asynch_baudrate == 19200 then
      delay_1uS( 10 )
   elsif asynch_baudrate == 9600 then
      delay_1uS( 21 )
   elsif asynch_baudrate == 4800 then
      delay_1uS( 42 )
   elsif asynch_baudrate == 2400 then
      delay_1uS( 85 )
   elsif asynch_baudrate == 1200 then
      delay_1uS( 170 )
   elsif asynch_baudrate == 600 then
      delay_10uS( 34 )
   elsif asynch_baudrate == 300 then
      delay_10uS( 68 )
   elsif asynch_baudrate == 110 then
      delay_10uS( 136 )
   else
      pragma error -- unsupported baudrate
   end if
end procedure

-- send a byte
procedure asynch_send( byte in x ) is
   var bit current_bit at x : 0

   -- set the appropriate interval
   _asynch_init
   next_interval
   next_interval

   -- the start bit
   if asynch_polarity == active_high then
      asynch_out_pin = high
   else
      asynch_out_pin = low
   end if
   next_interval

   -- the 8 data bits
   for 8 loop
      if asynch_polarity == active_high then
         asynch_out_pin = ! current_bit
      else
         asynch_out_pin = current_bit
      end if
      x = x >> 1
      next_interval
   end loop

   -- the stop bits
   if asynch_polarity == active_high then
      asynch_out_pin = low
   else
      asynch_out_pin = high
   end if
   for asynch_stopbits loop
      next_interval
   end loop

end procedure

procedure asynch'put( byte in x ) is
   asynch_send( x )
end procedure

procedure asynch_receive( byte out x ) is
   var bit current_bit at x : 7

   -- wait for a start bit
   if asynch_polarity == active_high then
      while asynch_in_pin != high loop end loop
   else
      while asynch_in_pin != low loop end loop
   end if

   -- wait for half a bit time
   _asynch_wait_half

   -- set the appropriate interval
   _asynch_init

   -- now repeat 8 times: 
   -- wait for the next interval and sample
   for 8 loop
      next_interval
      x = x >> 1
      if asynch_polarity == active_high then
         current_bit = ! asynch_in_pin
      else
         current_bit = asynch_in_pin
      end if
   end loop

   -- wait for the (first) stop bit
   next_interval

end procedure

function asynch_poll( byte out x ) return bit is 
   
   -- a start bit?
   if asynch_polarity == active_high then
      if asynch_in_pin != high then
         return false
      end if
   else
      if asynch_in_pin != low then
         return false
      end if
   end if

   -- start bit detected, receive the char
   asynch_receive( x )

   -- something received!
   return true

end function

-- intialize the input and output pins
asynch_out_direction = output
asynch_in_direction  = input
