--
-- file      : jstepper.jal
-- author    : Wouter van Ooijen
-- date      : 17-NOV-1998
-- purpose   : 4-phase unipolar stepper motor routines 
-- requires  : -
--
-- Copyright (C) 1998 Wouter van Ooijen
--
-- This library is free software; you can redistribute it and/or
-- modify it under the terms of the GNU Library General Public
-- License as published by the Free Software Foundation; either
-- version 2 of the License, or (at your option) any later version.
--
-- This library is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-- Library General Public License for more details.
-- 
-- You should have received a copy of the GNU Library General Public
-- License along with this library; if not, write to the
-- Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-- Boston, MA  02111-1307, USA.
--


procedure stepper_motor_full_forward( byte in out x ) is
   var bit h at x : 4
   x = x << 1
   if h then
      x = x | 0b_0001
   end if
   x = x & 0b_1111
end procedure

procedure stepper_motor_full_backward( byte in out x ) is
   var bit l at x : 0
   if l then
      x = x >> 1 | 0b_1000
   else
      x = x >> 1
   end if
   x = x & 0b_1111
end procedure

procedure stepper_motor_half_forward( byte in out x ) is
   x = x & 0b_1111
   if x == 0b_0001 then
      x = 0b_0011
      return
   end if
   if x == 0b_0011 then
      x = 0b_0010
      return
   end if
   if x == 0b_0010 then
      x = 0b_0110
      return
   end if
   if x == 0b_0110 then
      x = 0b_0100
      return
   end if
   if x == 0b_0100 then
      x = 0b_1100
      return
   end if
   if x == 0b_1100 then
      x = 0b_1000
      return
   end if
   if x == 0b_1000 then
      x = 0b_1001
      return
   end if
   x = 0b_0001
end procedure

procedure stepper_motor_half_backward( byte in out x ) is
   x = x & 0b_1111
   if x == 0b_1000 then
      x = 0b_1100
      return
   end if
   if x == 0b_1100 then
      x = 0b_0100
      return
   end if
   if x == 0b_0100 then
      x = 0b_0110
      return
   end if
   if x == 0b_0110 then
      x = 0b_0010
      return
   end if
   if x == 0b_0010 then
      x = 0b_0011
      return
   end if
   if x == 0b_0011 then
      x = 0b_0001
      return
   end if
   if x == 0b_0001 then
      x = 0b_1001
      return
   end if
   x = 0b_1000
end procedure